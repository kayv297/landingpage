[
    {
        "title": "Learning-D5.9: Plotting in R",
        "date": "2024-07-29",
        "tags": [
            "Data Analytics",
            "Data Visualization",
            "Learning Journey",
            "R"
        ],
        "postcontent": "Day 5.9<br>Actually, today is the 8th day since I started writing this blog, but there are three things I need to confirm from now on:<br>\n<ol>\n  <li>I will take Sundays off every week (to relax and eat cake).</li>\n  <li>If a topic is too long, I will split it into multiple posts because I can't write everything in one day.</li>\n  <li>For a general overview of R, you can refer to the series of posts on the 5th and 6th. That should be enough for you to get a general understanding of R, so you can decide if R is suitable for you.\n</ol>\nToday's topic will be Plotting Data in R. In the previous two posts (both on the 5th), I covered Exploring, Cleaning, and Transforming, and today will complete the 4 topics. Tomorrow will be a supplementary topic (also the final 20% for me to complete the 7/8 course to get the Data Analyst certificate from Google, yay).<br>At this stage, after obtaining clean and ready-to-analyze data, we will plot charts. To do this, we will use the <b>ggplot2</b> library. Let me demonstrate with an example:<br><br><div id=\"code-block\">library(tidyverse)<br>library(palmerpenguins)<br>ggplot(data&nbsp;=&nbsp;penguins)&nbsp;+<br>geom_point(mapping&nbsp;=&nbsp;aes(x&nbsp;=&nbsp;flipper_length_mm,&nbsp;y&nbsp;=&nbsp;body_mass_g))</div><img src='../images/day5.9ex1.png' id='inpost-img' alt='day5.9ex1'><br><br>Starting with the basics, a plot in R is composed of layers, and here we will learn about 4 basic layers:<br>\n<ul>\n  <li>Aesthetics (aes): determine how the plot and its components will look, including size, shape, and color.</li>\n  <li>Geometry (geom): determine the form of your plot (line, bar, scatterplot, boxplot, etc.).</li>\n  <li>Facets: determine if your plot will display subsets of your data, and if so, based on what criteria (e.g., if we have total sales at 3 locations, facets will help us display the plot at each location).</li>\n  <li>Labels/Annotations: add text to the plot to explain it.</li>\n</ul>\nEach layer represents a different aspect of a plot, and we layer them to create a complete plot.<br><b>#1: Aesthetics and Geometry</b><br>Now, let's try it out. Taking the plot above as an example:<br><br><div id=\"code-block\">library(tidyverse)&nbsp;#still&nbsp;need&nbsp;to&nbsp;load&nbsp;necessary&nbsp;libraries<br>library(palmerpenguins)<br>ggplot(data&nbsp;=&nbsp;penguins)&nbsp;+<br>geom_point(mapping&nbsp;=&nbsp;aes(x&nbsp;=&nbsp;flipper_length_mm,&nbsp;y&nbsp;=&nbsp;body_mass_g))</div><img src='../images/day5.9ex1.png' id='inpost-img' alt='day5.9ex1'><br>Here, we put the data we want to display into ggplot(). We don't necessarily need <b>'data ='</b> because ggplot() understands the first variable is the data.<br>Then, since we want to draw a scatterplot, we use <b>geom_point()</b>. You can use other plots by changing 'point' to another type, such as geom_bar().<br>And inside geom_...(), we need to specify the x and y columns representing the values by mapping (you can think of it as mapping or pointing geom_point to the two variables for the x and y columns). This gives us the template:<br><br><div id=\"code-block\">ggplot(data&nbsp;=&nbsp;dataset_name)<br>&nbsp;&nbsp;geom_point(mapping&nbsp;=&nbsp;aes(x&nbsp;=&nbsp;x_column,&nbsp;y&nbsp;=&nbsp;y_column)</div><br>*Bonus: <a href='</div>https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf' id='inpost-link' target='_blank'>Here</a> is a cheatsheet for ggplot, containing the most commonly used geom_... functions. Rest assured, it's comprehensive and reliable as recommended by the Google instructor.<br>Additionally, as mentioned, aes() can include size, shape, and color. Let's add them:<br><br><div id=\"code-block\">ggplot(penguins)&nbsp;+<br>&nbsp;&nbsp;geom_point(mapping=aes(x=flipper_length_mm,&nbsp;y=body_mass_g,&nbsp;size=bill_length_mm,&nbsp;shape=species,&nbsp;color=species))</div><img src='../images/day5.9ex2.png' id='inpost-img' alt='day5.9ex2'>Here, the x-axis is flipper length, the y-axis is body mass, the size of each data point is based on bill length, and shape and color are distinguished by species.<br>Personally, I find the size and shape a bit messy, so let's remove them:<br><img src='../images/day5.9ex3.png' id='inpost-img' alt='day5.9ex3'>I like it this way!<br>Continuing, you can notice that our data is trending upwards, meaning we can conclude:<br><b>Longer flippers => Larger body mass</b><br>To illustrate this trend, we can add a line:<br><div id=\"code-block\">ggplot(penguins)&nbsp;+<br>&nbsp;&nbsp;geom_point(mapping=aes(x=flipper_length_mm,&nbsp;y=body_mass_g,&nbsp;color=species))&nbsp;+<br>&nbsp;&nbsp;geom_smooth(mapping=aes(x=flipper_length_mm,&nbsp;y=body_mass_g),&nbsp;color=\"black\",&nbsp;method=\"gam\")</div><img src='../images/day5.9ex4.png' id='inpost-img' alt='day5.9ex4'>geom_smooth() represents a smooth trend line, and we still need mapping. The method is something you don't need to focus on for now; I'll explain more in a specific post on this topic.<br>When looking at data points, some being too close together can be confusing. geom_jitter() (instead of geom_point()) can help with that.<br><div id=\"code-block\">ggplot(penguins)&nbsp;+<br>&nbsp;&nbsp;geom_jitter(mapping=aes(x=flipper_length_mm,&nbsp;y=body_mass_g,&nbsp;color=species))&nbsp;+<br>&nbsp;&nbsp;geom_smooth(mapping=aes(x=flipper_length_mm,&nbsp;y=body_mass_g),&nbsp;color=\"black\",&nbsp;method=\"gam\")</div><img src='../images/day5.9ex5.png' id='inpost-img' alt='day5.9ex5'>As you can see, the data points have shifted slightly apart, making them easier to view. geom_jitter() adds a bit of noise to each data point to achieve this.<br>Let's change things up a bit and create a bar chart:<br><br><div id=\"code-block\">ggplot(penguins)&nbsp;+<br>&nbsp;&nbsp;geom_bar(mapping=&nbsp;aes(x=species,&nbsp;fill=sex))</div><img src='../images/day5.9ex6.png' id='inpost-img' alt='day5.9ex6'>Here, fill helps us stack columns by the gender of the penguins. If we don't specify y, geom_bar() will default to counting the frequency of x.<br><b>#2: Facets</b><br>Using facets means you want to display multiple plots, each representing a subset of your data. To make it easier to understand, it looks something like this:<br><br><div id=\"code-block\">ggplot(penguins)&nbsp;+<br>&nbsp;&nbsp;geom_point(mapping=aes(x=flipper_length_mm,&nbsp;y=body_mass_g,&nbsp;color=species))&nbsp;+<br>&nbsp;&nbsp;facet_wrap(~species)</div><img src='../images/day5.9ex7.png' id='inpost-img' alt='day5.9ex7'>You put the variable to split by into facet_...(), remember to add the tilde (~). Here, we split by species. Why facet_...?<br>Because when using Facets, there are two types:\n<ul>\n  <li>facet_wrap: only displays plots with data.</li>\n  <li>facet_grid: displays all plots according to predefined subsets, whether they have data or not.</li>\n</ul>\nA bit confusing, right? Let's differentiate with images. To make it clearer, we will use Facets for two variables.<br>&nbsp;&nbsp;*facet_wrap()<br><div id=\"code-block\">ggplot(penguins)&nbsp;+<br>&nbsp;&nbsp;geom_point(mapping=aes(x=flipper_length_mm,&nbsp;y=body_mass_g,&nbsp;color=species))&nbsp;+<br>&nbsp;&nbsp;facet_wrap(~island~species)</div><img src='../images/day5.9ex8.png' id='inpost-img' alt='day5.9ex8'><br>&nbsp;&nbsp;*facet_grid()<br><div id=\"code-block\">ggplot(penguins)&nbsp;+<br>&nbsp;&nbsp;geom_point(mapping=aes(x=flipper_length_mm,&nbsp;y=body_mass_g,&nbsp;color=species))&nbsp;+<br>&nbsp;&nbsp;facet_grid(~island~species)</div><img src='../images/day5.9ex9.png' id='inpost-img' alt='day5.9ex9'>The plot above nests both splitting variables (island and species) on top of the plot (island on top, species below), and plots without data are not displayed. Below, islands are on the vertical axis, and species are on the horizontal axis, and even plots without data are displayed.<br><b>#3: Labels and Annotations</b><br>\n<ul>\n  <li>Labels (labs): add fixed text (title, subtitle, caption).</li>\n  <li>Annotations (annotate): add text and decide the position on the plot.</li>\n</ul>\nUsage:<br><div id=\"code-block\">ggplot(data=penguins)&nbsp;+<br>&nbsp;&nbsp;geom_point(mapping=aes(x=flipper_length_mm,&nbsp;y=body_mass_g,&nbsp;color=species))&nbsp;+<br>&nbsp;&nbsp;labs(title=\"Penguin&nbsp;Body&nbsp;Mass&nbsp;vs&nbsp;Flipper&nbsp;Length\",&nbsp;x=\"Flipper&nbsp;Length&nbsp;(mm)\",&nbsp;y=\"Body&nbsp;Mass&nbsp;(g)\",&nbsp;subtitle=\"sample\",&nbsp;caption=\"Plotting&nbsp;by&nbsp;Kay&nbsp;Vu\")&nbsp;+<br>&nbsp;&nbsp;annotate(\"text\",&nbsp;x=220,&nbsp;y=3500,&nbsp;label=\"Gentoo&nbsp;are&nbsp;largest\",&nbsp;color=\"black\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontface=\"bold\",&nbsp;size=5,&nbsp;angle=45)</div><img src='../images/day5.9ex10.png' id='inpost-img' alt='day5.9ex10'>With labs(), we have basic options like title, x-axis label, y-axis label, subtitle, and caption. There are more options available.<br>With annotate, we must first specify 'text', then the x-y position (relative to the x-y axes on the plot), and additional customization (color, font style, size, etc.).<br>That's all! These are the MOST GENERAL things you should know about Plotting in R. I hope you now have a general view of Plotting in R, and whether coding for plotting suits you. If not, you might consider other tools like Power BI, Tableau, or even Excel.<br>Stay heated! Thanks for coming here today!<br>"
    },
    {
        "title": "Learning-D5.5: Data Transforming in R",
        "date": "2024-07-27",
        "tags": [
            "Data Analysis",
            "Data Cleaning",
            "Data Exploration",
            "Learning Journey",
            "R"
        ],
        "postcontent": "Day 5.5<br>Today I will finish writing about the remaining 2 topics mentioned in the previous post: Data Transforming and Plotting in R. Let's get to it.<br>*Still a BIG note: data topics covered in today and yesterday's posts are VERY BASIC, to help beginners grasp these concepts quickly. Detailed posts about each topic will come later (maybe even a series).<br><br>Let's get started. <b>Data Transforming</b> can be understood as we will:<br>\n<ul>\n  <li>Split 1 column -> multiple columns => Use separate().</li>\n  <li>Combine multiple columns -> 1 column => Use unite().</li>\n  <li>Create a new column based on information from existing columns => Use mutate().</li>\n</ul>\nThose will be the only 3 functions we learn in this section.<br>Learning is better by example. We need data to begin with. I have a sample data table:<br><br><div id=\"code-block\">>&nbsp;library(tidyverse)&nbsp;#Remember&nbsp;to&nbsp;load&nbsp;tidyverse&nbsp;first&nbsp;(bible&nbsp;for&nbsp;beginners)<br>>&nbsp;employee<br>&nbsp;&nbsp;&nbsp;id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;&nbsp;&nbsp;&nbsp;job_title<br>1&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;John&nbsp;Mendes&nbsp;Professional<br>2&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rob&nbsp;Stewart&nbsp;&nbsp;&nbsp;Programmer<br>3&nbsp;&nbsp;&nbsp;3&nbsp;Rachel&nbsp;Abrahamson&nbsp;&nbsp;&nbsp;Management<br>4&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;Christy&nbsp;Hickman&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clerical<br>5&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;Johnson&nbsp;Harper&nbsp;&nbsp;&nbsp;&nbsp;Developer<br>6&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;Candace&nbsp;Miller&nbsp;&nbsp;&nbsp;Programmer<br>7&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Carlson&nbsp;Landy&nbsp;&nbsp;&nbsp;Management<br>8&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pansy&nbsp;Jordan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clerical<br>9&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Darius&nbsp;Berry&nbsp;&nbsp;&nbsp;&nbsp;Developer<br>10&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;Claudia&nbsp;Garcia&nbsp;&nbsp;&nbsp;Programmer</div>First will be separate(), used like this:<br><div id=\"code-block\">separate(data,&nbsp;\"column_to_split\",&nbsp;into=c(\"split_col_1\",&nbsp;\"split_col_2\"),&nbsp;sep=\"chosen_delimiter\")</div><div id=\"code-block\">>&nbsp;separated_df&nbsp;<-&nbsp;separate(employee,&nbsp;name,&nbsp;into=c(\"First&nbsp;Name\",&nbsp;\"Last&nbsp;Name\"),&nbsp;sep=\"&nbsp;\")<br>>&nbsp;separated_df<br>&nbsp;&nbsp;&nbsp;id&nbsp;First&nbsp;Name&nbsp;&nbsp;Last&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;job_title<br>1&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;John&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mendes&nbsp;Professional<br>2&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rob&nbsp;&nbsp;&nbsp;&nbsp;Stewart&nbsp;&nbsp;&nbsp;Programmer<br>3&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rachel&nbsp;Abrahamson&nbsp;&nbsp;&nbsp;Management<br>4&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;Christy&nbsp;&nbsp;&nbsp;&nbsp;Hickman&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clerical<br>5&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;Johnson&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Harper&nbsp;&nbsp;&nbsp;&nbsp;Developer<br>6&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;Candace&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Miller&nbsp;&nbsp;&nbsp;Programmer<br>7&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;Carlson&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Landy&nbsp;&nbsp;&nbsp;Management<br>8&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pansy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jordan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clerical<br>9&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Darius&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Berry&nbsp;&nbsp;&nbsp;&nbsp;Developer<br>10&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;Claudia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Garcia&nbsp;&nbsp;&nbsp;Programmer</div>The original 'name' column has been split into 'First Name' and 'Last Name'. 'sep' stands for separator, meaning the symbol you want to use to split the column.<br>Next is unite, this time I will merge 2 columns together:<br><br><div id=\"code-block\">unite(data,&nbsp;\"merged_column_name\",&nbsp;...,&nbsp;sep=\"chosen_delimiter\")</div> The ... part is where you fill in the column names you want to merge, there are 2 ways to do this:\n<ul>\n  <li>Names separated by commas (,):\n  <div id=\"code-block\">unite(separated_df, \"name\", \"First Name\", \"Last Name\", sep=\" \")</div></li>\n  <li>Or put all the column names you want in c():\n  <div id=\"code-block\">unite(separated_df, \"name\", c(\"First Name\", \"Last Name\"), sep=\" \")</div></li>\n</ul>\nI prefer the second way, as it clearly shows which part contains the column names to merge. Overall illustration:<br><div id=\"code-block\">>&nbsp;unite(separated_df,&nbsp;\"name\",&nbsp;c(\"First&nbsp;Name\",&nbsp;\"Last&nbsp;Name\"),&nbsp;sep=\"&nbsp;\")<br>&nbsp;&nbsp;&nbsp;id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;&nbsp;&nbsp;&nbsp;job_title<br>1&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;John&nbsp;Mendes&nbsp;Professional<br>2&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rob&nbsp;Stewart&nbsp;&nbsp;&nbsp;Programmer<br>3&nbsp;&nbsp;&nbsp;3&nbsp;Rachel&nbsp;Abrahamson&nbsp;&nbsp;&nbsp;Management<br>4&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;Christy&nbsp;Hickman&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clerical<br>5&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;Johnson&nbsp;Harper&nbsp;&nbsp;&nbsp;&nbsp;Developer<br>6&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;Candace&nbsp;Miller&nbsp;&nbsp;&nbsp;Programmer<br>7&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Carlson&nbsp;Landy&nbsp;&nbsp;&nbsp;Management<br>8&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pansy&nbsp;Jordan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clerical<br>9&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Darius&nbsp;Berry&nbsp;&nbsp;&nbsp;&nbsp;Developer<br>10&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;Claudia&nbsp;Garcia&nbsp;&nbsp;&nbsp;Programmer</div><br>Finally, we have mutate. With mutate, we can create a new column using the information from an existing column, used like this:<br><div id=\"code-block\">mutate(data,&nbsp;\"new_column_name\"&nbsp;=&nbsp;...)</div> The ... part is where we fill in what we want the new column to have.<br>For example, I will create a column to calculate, specifically converting the body mass of penguins from grams (g) to kilograms (kg). Original data and illustration:<br><div id=\"code-block\">>&nbsp;new_penguins&nbsp;#original&nbsp;data<br>#&nbsp;A&nbsp;tibble:&nbsp;344&nbsp;\u00d7&nbsp;3<br>&nbsp;&nbsp;&nbsp;species&nbsp;island&nbsp;&nbsp;&nbsp;&nbsp;body_mass_g<br>&nbsp;&nbsp;&nbsp;<fct>&nbsp;&nbsp;&nbsp;<fct>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<int><br>&nbsp;1&nbsp;Adelie&nbsp;&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3750<br>&nbsp;2&nbsp;Adelie&nbsp;&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3800<br>&nbsp;3&nbsp;Adelie&nbsp;&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3250<br>&nbsp;4&nbsp;Adelie&nbsp;&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NA<br>&nbsp;5&nbsp;Adelie&nbsp;&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3450<br>&nbsp;6&nbsp;Adelie&nbsp;&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3650<br>&nbsp;7&nbsp;Adelie&nbsp;&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3625<br>&nbsp;8&nbsp;Adelie&nbsp;&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4675<br>&nbsp;9&nbsp;Adelie&nbsp;&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3475<br>10&nbsp;Adelie&nbsp;&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4250<br>#&nbsp;\u2139&nbsp;334&nbsp;more&nbsp;rows<br>#&nbsp;\u2139&nbsp;Use&nbsp;print(n&nbsp;=&nbsp;...)&nbsp;to&nbsp;see&nbsp;more&nbsp;rows<br>mutate(new_penguins,&nbsp;\"body_mass_kg\"&nbsp;=&nbsp;body_mass_g&nbsp;/1000)&nbsp;#create&nbsp;kilogram&nbsp;column<br><br>A&nbsp;tibble:&nbsp;344&nbsp;\u00d7&nbsp;4<br>species&nbsp;island&nbsp;body_mass_g&nbsp;body_mass_kg<br><fct>&nbsp;<fct>&nbsp;<int>&nbsp;<dbl><br>1&nbsp;Adelie&nbsp;Torgersen&nbsp;3750&nbsp;3.75<br>2&nbsp;Adelie&nbsp;Torgersen&nbsp;3800&nbsp;3.8<br>3&nbsp;Adelie&nbsp;Torgersen&nbsp;3250&nbsp;3.25<br>4&nbsp;Adelie&nbsp;Torgersen&nbsp;NA&nbsp;NA<br>5&nbsp;Adelie&nbsp;Torgersen&nbsp;3450&nbsp;3.45<br>6&nbsp;Adelie&nbsp;Torgersen&nbsp;3650&nbsp;3.65<br>7&nbsp;Adelie&nbsp;Torgersen&nbsp;3625&nbsp;3.62<br>8&nbsp;Adelie&nbsp;Torgersen&nbsp;4675&nbsp;4.68<br>9&nbsp;Adelie&nbsp;Torgersen&nbsp;3475&nbsp;3.48<br>10&nbsp;Adelie&nbsp;Torgersen&nbsp;4250&nbsp;4.25<br><br>\u2139&nbsp;334&nbsp;more&nbsp;rows<br>\u2139&nbsp;Use&nbsp;print(n&nbsp;=&nbsp;...)&nbsp;to&nbsp;see&nbsp;more&nbsp;rows</div><br>That's for today!<br>Stay heated! Thanks for coming here!<br>"
    },
    {
        "title": "Learning-D5: Data Exploring and Cleaning in R",
        "date": "2024-07-26",
        "tags": [
            "Data Analysis",
            "Data Cleaning",
            "Data Exploration",
            "Learning Journey",
            "R"
        ],
        "postcontent": "Day 5<br>Today I completed 80% of Google's R course. Basically, I\u2019ve finished all the coding in this course; what's left is creating markdown files in R (files used to guide others on how to read and use my code, similar to README.md).<br><br>I was a bit surprised that in just one day (actually about ~4 hours), I was able to cover all the topics of Exploring, Cleaning, Transforming, and Plotting. But I realized that the content of this course only covers those topics sufficiently for beginners, and I\u2019m not very satisfied with that.<br>So, I decided that after finishing this course, I will follow a longer video on YouTube, maybe over 10 hours, to fully grasp R before continuing with the final course to get the certificate, hehe.<br><br>Today's post will only summarize the topics of Exploring and Cleaning (the other two will be covered tomorrow, as writing them all together would be too long) in the most general way possible (there might be detailed posts on each topic later, but that will be on another day).<br><b>*BIG note:</b> you might not understand the following lines of code, but don\u2019t worry, the functions are easy to understand, and things like %>% or library() will be explained in a separate post (because these are the basics you need to know before going further, like a starter pack).<br><br><b>#1: Data Exploring in R</b><br>Simply put, at this stage, you will look at the data to understand what your data is generally saying.<br>It sounds vague, right? To be more specific:<br>\n<ul>\n  <li>Numeric data columns: min-max, standard deviation, distribution, how many values are missing (Null values), sorting in order, etc.</li>\n  <li>Text data columns: average length, is it in a category format (like ratings, for example, high, medium, low), if so, how many values are there, splitting + combining columns, filtering by conditions, etc.</li>\n</ul>\nAnd to see these things, we have basic functions like: `min`, `max`, `sd`, `skim`, etc.<br>Let's demonstrate a few:<br><div id=\"code-block\">#load&nbsp;the&nbsp;necessary&nbsp;libraries&nbsp;first<br>library(tidyverse)<br>library(palmerpenguins)<br><br>#get&nbsp;the&nbsp;island&nbsp;and&nbsp;body_mass_g&nbsp;columns&nbsp;from&nbsp;the&nbsp;penguins&nbsp;dataset&nbsp;(in&nbsp;the&nbsp;palmerpenguins&nbsp;library)<br>new_penguins&nbsp;<-&nbsp;penguins&nbsp;%>%&nbsp;<br>&nbsp;&nbsp;select(island,&nbsp;body_mass_g)<br></div>At this point, I am getting the data first (still the penguin data). I chose only 2 columns because this dataset has 8 columns, and I only need 2 for this example.<br>Next, I will try to sort based on the body mass column from largest to smallest<br><div id=\"code-block\">>&nbsp;new_penguins&nbsp;%>%&nbsp;<br>+&nbsp;&nbsp;&nbsp;arrange(-body_mass_g)<br>#&nbsp;A&nbsp;tibble:&nbsp;344&nbsp;\u00d7&nbsp;2<br>&nbsp;&nbsp;&nbsp;island&nbsp;body_mass_g<br>&nbsp;1&nbsp;Biscoe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6300<br>&nbsp;2&nbsp;Biscoe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6050<br>&nbsp;3&nbsp;Biscoe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6000<br>&nbsp;4&nbsp;Biscoe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6000<br>&nbsp;5&nbsp;Biscoe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5950<br>&nbsp;6&nbsp;Biscoe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5950<br>&nbsp;7&nbsp;Biscoe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5850<br>&nbsp;8&nbsp;Biscoe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5850<br>&nbsp;9&nbsp;Biscoe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5850<br>10&nbsp;Biscoe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5800<br>#&nbsp;\u2139&nbsp;334&nbsp;more&nbsp;rows<br>#&nbsp;\u2139&nbsp;Use&nbsp;`print(n&nbsp;=&nbsp;...)`&nbsp;to&nbsp;see&nbsp;more&nbsp;rows</div>Great, now I will calculate the average, max, and min body mass of the penguins on each island.<br><div id=\"code-block\">>&nbsp;#calculate&nbsp;the&nbsp;average,&nbsp;max,&nbsp;min&nbsp;body&nbsp;mass&nbsp;by&nbsp;island<br>>&nbsp;new_penguins&nbsp;%>%&nbsp;<br>+&nbsp;&nbsp;&nbsp;group_by(island)&nbsp;%>%<br>+&nbsp;&nbsp;&nbsp;drop_na()&nbsp;%>%<br>+&nbsp;&nbsp;&nbsp;summarise(mean_body_mass_g&nbsp;=&nbsp;mean(body_mass_g),<br>+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max_body_mass_g&nbsp;=&nbsp;max(body_mass_g),<br>+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min_body_mass_g&nbsp;=&nbsp;min(body_mass_g))<br>#&nbsp;A&nbsp;tibble:&nbsp;3&nbsp;\u00d7&nbsp;4<br>&nbsp;&nbsp;island&nbsp;&nbsp;&nbsp;&nbsp;mean_body_mass_g&nbsp;max_body_mass_g&nbsp;min_body_mass_g<br>1&nbsp;Biscoe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4716.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6300&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2850<br>2&nbsp;Dream&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3713.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4800&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2700<br>3&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3706.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4700&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2900</div>Next, you can view the general structure of your data with\n<ul>\n  <li>str(): structure - shows you the structure of the data.</li>\n  <li>glimpse(): similar to str(), but slightly different, the difference will be illustrated shortly.</li>        \n  <li>colnames(): list of column names.</li>\n</ul>\nIllustration:<br><div id=\"code-block\">>&nbsp;str(new_penguins)<br>tibble&nbsp;[344&nbsp;\u00d7&nbsp;2]&nbsp;(S3:&nbsp;tbl_df/tbl/data.frame)<br>&nbsp;$&nbsp;island&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Factor&nbsp;w/&nbsp;3&nbsp;levels&nbsp;\"Biscoe\",\"Dream\",..:&nbsp;3&nbsp;3&nbsp;3&nbsp;3&nbsp;3&nbsp;3&nbsp;3&nbsp;3&nbsp;3&nbsp;3&nbsp;...<br>&nbsp;$&nbsp;body_mass_g:&nbsp;int&nbsp;[1:344]&nbsp;3750&nbsp;3800&nbsp;3250&nbsp;NA&nbsp;3450&nbsp;3650&nbsp;3625&nbsp;4675&nbsp;3475&nbsp;4250&nbsp;...<br>>&nbsp;glimpse(new_penguins)<br>Rows:&nbsp;344<br>Columns:&nbsp;2<br>$&nbsp;island&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<fct>&nbsp;Torgersen,&nbsp;Torgersen,&nbsp;Torgersen,&nbsp;Torgersen,&nbsp;Torgersen,&nbsp;Torgersen,&nbsp;...<br>$&nbsp;body_mass_g&nbsp;<int>&nbsp;3750,&nbsp;3800,&nbsp;3250,&nbsp;NA,&nbsp;3450,&nbsp;3650,&nbsp;3625,&nbsp;4675,&nbsp;3475,&nbsp;4250,&nbsp;3300,&nbsp;...<br>>&nbsp;colnames(new_penguins)&nbsp;#view&nbsp;column&nbsp;names<br>[1]&nbsp;\"island\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"body_mass_g\"</div>With str(), we can see that island is a category with 3 values, and the series 3 3 3 3 ... after it are the values of the first few rows. With glimpse(), we can\u2019t see that => I prefer str().<br><br><b>#2: Cleaning Data in R</b><br>At this stage, you will clean your data with the goal of making it clean before analysis.<br>The basics include: filtering data, selecting necessary columns, renaming columns, and cleaning column names for easier use. Each task has a corresponding function:\n<ul>\n  <li>Filter data: filter()</li>\n  <li>Select columns: select()</li>\n  <li>Rename columns: rename()</li>\n  <li>Clean column names: clean_names()</li>\n</ul>\nLet\u2019s try using them:<br><div id=\"code-block\">>&nbsp;penguins&nbsp;%>%&nbsp;<br>+&nbsp;&nbsp;&nbsp;select(island,&nbsp;body_mass_g)&nbsp;%>%&nbsp;<br>+&nbsp;&nbsp;&nbsp;filter(island&nbsp;==&nbsp;\"Torgersen\"&nbsp;|&nbsp;island&nbsp;==&nbsp;\"Biscoe\")&nbsp;%>%&nbsp;<br>+&nbsp;&nbsp;&nbsp;rename(island_name&nbsp;=&nbsp;island)<br>#&nbsp;A&nbsp;tibble:&nbsp;220&nbsp;\u00d7&nbsp;2<br>&nbsp;&nbsp;&nbsp;island_name&nbsp;body_mass_g<br>&nbsp;1&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3750<br>&nbsp;2&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3800<br>&nbsp;3&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3250<br>&nbsp;4&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NA<br>&nbsp;5&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3450<br>&nbsp;6&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3650<br>&nbsp;7&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3625<br>&nbsp;8&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4675<br>&nbsp;9&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3475<br>10&nbsp;Torgersen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4250<br>#&nbsp;\u2139&nbsp;210&nbsp;more&nbsp;rows<br>#&nbsp;\u2139&nbsp;Use&nbsp;`print(n&nbsp;=&nbsp;...)`&nbsp;to&nbsp;see&nbsp;more&nbsp;rows</div>Here, I chose to take 2 columns: island and body_mass_g, then I filtered to only get data from the islands Torgersen and Biscoe, and then I renamed the island column to island_name.<br><br>For clean_names, it\u2019s a bit special, I have the following example:<br><div id=\"code-block\">&nbsp;&nbsp;`Name@123`&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`Age&nbsp;(Years)`&nbsp;`Salar*y(USD)`&nbsp;`Date-Joined`&nbsp;Dept.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`employee&nbsp;ID`<br>1&nbsp;John&nbsp;Doe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;55000&nbsp;2021-01-15&nbsp;&nbsp;&nbsp;&nbsp;HR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>2&nbsp;Jane&nbsp;Smith&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;60000&nbsp;2020-11-30&nbsp;&nbsp;&nbsp;&nbsp;Finance&nbsp;&nbsp;&nbsp;&nbsp;E124&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>3&nbsp;Chris&nbsp;Brown&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;62000&nbsp;2019-05-20&nbsp;&nbsp;&nbsp;&nbsp;IT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E125&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>4&nbsp;Patricia&nbsp;Johnson&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;75000&nbsp;2018-03-10&nbsp;&nbsp;&nbsp;&nbsp;Marketing&nbsp;&nbsp;E126&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>5&nbsp;Michael&nbsp;Williams&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;90000&nbsp;2017-09-25&nbsp;&nbsp;&nbsp;&nbsp;Operations&nbsp;E127</div>As you can see, the column names have many errors, and if left as is, it will be very difficult to use, so we have clean_names()<br><div id=\"code-block\">>&nbsp;library(janitor)&nbsp;#library&nbsp;containing&nbsp;clean_names()<br>>&nbsp;messy_names&nbsp;%>%&nbsp;<br>+&nbsp;&nbsp;&nbsp;clean_names()<br>#&nbsp;A&nbsp;tibble:&nbsp;5&nbsp;\u00d7&nbsp;6<br>&nbsp;&nbsp;name_123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age_years&nbsp;salar_y_usd&nbsp;date_joined&nbsp;dept&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;employee_id<br>&nbsp;&nbsp;<chr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<dbl>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<dbl>&nbsp;<date>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<chr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<chr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>1&nbsp;John&nbsp;Doe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;55000&nbsp;2021-01-15&nbsp;&nbsp;HR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>2&nbsp;Jane&nbsp;Smith&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;60000&nbsp;2020-11-30&nbsp;&nbsp;Finance&nbsp;&nbsp;&nbsp;&nbsp;E124&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>3&nbsp;Chris&nbsp;Brown&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;62000&nbsp;2019-05-20&nbsp;&nbsp;IT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E125&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>4&nbsp;Patricia&nbsp;Johnson&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;75000&nbsp;2018-03-10&nbsp;&nbsp;Marketing&nbsp;&nbsp;E126&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>5&nbsp;Michael&nbsp;Williams&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;90000&nbsp;2017-09-25&nbsp;&nbsp;Operations&nbsp;E127&nbsp;</div>After using clean_names(), the column names have been changed, and it becomes easier to use (though the salary column is still not perfect, but it\u2019s quite good already \ud83d\ude02).<br><br>That's all I learned today.<br>Stay heated! Thanks for coming here!<br><br>"
    },
    {
        "title": "Learning-D4: Blog Posting GUI (FINALLY!!\ud83d\ude2d\ud83d\ude2d)",
        "date": "2024-07-25",
        "tags": [
            "Dev",
            "Problem Solving",
            "Learning Journey"
        ],
        "postcontent": "Day 4<br>Today, I paused studying data to solve an arising problem. Why? Because I'm really frustrated about it\ud83d\ude24\ud83d\ude24.<br>Since I started writing the blog, I thought I only needed to spend 30 minutes to an hour each day to brainstorm and write.<br>And the result is... 3 hours \ud83d\ude02 (yesterday).<br>And why? Look at the picture below (you'll understand immediately):<br><img src='../images/pastpost.png' id='inpost-img' alt='Past Post'><br>Yes sir, I've been manually writting all these HTML tags (those <...> things).<br><br><b>*Notes:</b> For those who don't know, to display things like line breaks, bold text, and bullet points on the web, it's not automatic; it's thanks to those <...> tags. If you don't add them, when it appears on the web, it will be all clumped together, looking like this:<br><img src='../images/pastpost2.png' id='inpost-img' alt='Past Post 2'><br><br>And hand-coding all those tags really takes A LOT OF TIME, and you have to test constantly to see if the formatting is correct (it's really exhausting).<br><br>So today I thought that's enough and I'm sick of it; I need to make an app to help solve this issue, and I made it today (technically, it's a GUI - Graphical User Interface).<br>Basically, it looks like this:<br><img src='../images/nowpost_en.png' id='inpost-img' alt='Posting GUI'><br>With this, I just need to fill in the content, add tags using the available widget buttons, choose the file I want to save into, and click 'Submit' - and all done, awesome!!<br>As for the JSON file at the top, it's the file where I save the post (like writing and saving in Word).<br><br>Let's get to an example for a better understanding; How about making today's post by this GUI:<br><img src='../images/nowpost2_en.png' id='inpost-img' alt='Posting GUI Example'><br><b>*Important Note:</b> I don't know much about creating GUIs, especially like this, so I used AI to help (GitHub Copilot, it's amazing). Of course, the AI output isn't perfect (or maybe I haven't figured out the right prompts \ud83d\ude02), so I still had to read and manually adjust some things to ensure the GUI works exactly how I want.<br><br>New things I used: Python Tkinter (Library), Regex (Regular Expression - if possible, I'll write a post about this topic, it's quite interesting), OOP (Object-oriented Programming - a nightmare for many \ud83d\ude02).<br><br>That's all I learned today.<br>Stay heated! Thanks for coming here!<br>"
    },
    {
        "title": "Learning-D3: R Basics: Data types",
        "postcontent": "Day 3<br>Today I started the 7th course (over 8) to earn the Google Data Analytics Professional Certificate: Data Analysis with R Programming. This is also my first time working with R.<br>Since it's the first day, I learned some basics (perfect for those new to programming).<br><br>  <b>1. Variables, Data Types, Vector, and List</b><br>  R has 4 basic data types:<ul><li><b>Character:</b> stores character strings. Remember to write them in quotes. ('a', 'b', 'Kay')</li><li><b>Double:</b> stores real numbers. (1.5, 2.5, 19.5)</li><li><b>Integer:</b> stores whole numbers. (1, 2, 30)</li><li><b>Logical:</b> stores TRUE or FALSE.</li></ul><br><b>*Notes:</b> Double and Integer have different declaration methods; I'll show you when creating a Vector.<br>  These variable types can form a Vector or a List.<br>  Getting confused already\ud83d\ude35\u200d\ud83d\udcab\ud83d\ude35\u200d\ud83d\udcab? So what are Vector and List?<br>  <b>Vector:</b> is a collection of elements. There are 2 types of vectors: <b>Atomic Vector</b> and <b>List</b>.<br><ul><li><b>Atomic Vector (let's just call it vector for simplicity):</b> containing elements of the same type. There are 4 types of atomic vectors: Character, Double, Integer, and Logical.<br><img src='../images/demovector.png' id='code-img' alt='Demo Vector'><br>To create a vector, we use c() as shown in the image and '<-' to assign the created value to a variable. To see what type the vector is, use typeof(variable_name). Note the difference between Double and Integer vectors. Integer must have 'L' after each number, otherwise R will auto interpret it as Double. Remember that!\ud83d\ude01\ud83d\ude01<br><br>So what if a vector contains multiple types of values? Check out this example:<br><img src='../images/demovector2.png' id='code-img' alt='Demo Vector 2'><br>This vector contains all 4 data types, so why is the result Character? Because if a vector contains multiple data types, R will follow a preset priority order: Character \u2192 Double \u2192 Integer \u2192 Logical (You don't need to remember this; you can Google it\ud83d\ude09).<br><br>Next is naming the variables in the Vector (this is my first time seeing this approach, they don\u2019t have it in other languages, or I haven\u2019t know that yet\ud83e\udd14). Basically, it looks like this:<br><img src='../images/demovector3.png' id='code-img' alt='Demo Vector 3'><br>Here, the Vector values are (1, 2, 3), and 'a' will be the name of the variable with value 1, 'b' will be the name of the variable with value 2,...<br><br>There's another way to name them:<br><img src='../images/demovector4.png' id='code-img' alt='Demo Vector 4'><br>The vector already has values, then we direct the names to the variables using names(vector_name), and use another vector containing the variable names to apply them. You don't have to use both methods, just choose the one you like to avoid confusion!</li><li><b>List:</b> can contain multiple data types. To create it, we use list(elements) as shown below:<br><img src='../images/demolist.png' id='code-img' alt='Demo List'><br>We can also put a list INSIDE a list, called Nested List:<br><img src='../images/demolist2.png' id='code-img' alt='Demo List 2'><br>To view this list, we have 2 ways:<br><img src='../images/demolist3.png' id='code-img' alt='Demo List 3'><br><img src='../images/demolist4.png' id='code-img' alt='Demo List 4'><br>I prefer the first method because it's easier to read.<br><br>Naming is similar to Vector:<br><img src='../images/demolist5.png' id='code-img' alt='Demo List 5'><br></li></ul><b>2. Dates - Time</b><br>Next is about time and dates. Here we use functions available in the 'lubridate' library of 'tidyverse' (a larger library). But these need to be downloaded and loaded when you use them; here's how:<br><img src='../images/datetime.png' id='code-img' alt='Date Time'><br>Wait a bit for it to run; it needs to be downloaded. You only need to install once; from then on, you only need library() to load it. Experiment a bit:<br><img src='../images/datetime1.png' id='code-img' alt='Date Time 1'><br>today() is used to see today's date, and now() to see the current time.<br>To work with this data type, we first need to convert the input data to Date type because usually, we import data from somewhere, and R will recognize them as Character (default).<br><img src='../images/datetime2.png' id='code-img' alt='Date Time 2'><br>ymd, mdy, dmy,... are conversion functions. Initially, I thought it would be hard to remember\ud83d\ude35\u200d\ud83d\udcab. But it's actually super easy.<br><b>y: year, m: month, d: day</b><br>Example: ymd is year-month-day, mdy is month-day-year,...<br> The order doesn\u2019t matter; as long as the values in the function are in the correct order, you're good to go.<br>If you don't arrange the order correctly, you'll get an error like this:<br><img src='../images/datetime3.png' id='code-img' alt='Date Time 3'><br>There can't be 24th month, right?\ud83d\ude02\ud83d\ude02.<br><b>*Notes:</b> In case you\u2019re curious, \u2018Date\u2019 type data is understood by R as Double.<br><img src='../images/datetime4.png' id='code-img' alt='Date Time 4'><br>So far, it's only been dates, now let's add time.<br><img src='../images/datetime5.png' id='code-img' alt='Date Time 5'><br><b>h: hour, m: minute, s: second</b>Always remember that the values in the function must match its format.<br><b>*Notes:</b> If you don't specify the hour, minute, second, R will automatically assign 0 to them.<br><br>The problem is it's all UTC, even if you try to input another time zone, R will still understand it as UTC, like this:<br><img src='../images/datetime6.png' id='code-img' alt='Date Time 6'><br>To change the time zone, we need to add tz afterward:<br><img src='../images/datetime7.png' id='code-img' alt='Date Time 7'><br><br><b>3. Playing around</b>After learning the basics, I experimented a bit with a dataset available in R (actually, it comes with the library, just install it with install.package()).<br>This table contains data about penguins, and I created 3 charts that looks really great to me.<br><b>  a. Species count (easy)</b><br><img src='../images/penguin1.png' id='code-img' alt='Penguin 1'><br><b>  b. Body mass based on flipper length (by species) (intermediate)</b><br><img src='../images/penguin2.png' id='code-img' alt='Penguin 2'><br><b>  c. Distribution of body mass by species (challenging)</b><br><img src='../images/penguin3.png' id='code-img' alt='Penguin 3'><br>Making these charts and reading data from this table is really fun.<br>That's all I learned today.<br>Stay heated! Thanks for coming here!",
        "date": "2024-07-24",
        "tags": [
            "Data Visualization",
            "Learning Journey",
            "R",
            "Data Analysis"
        ]
    },
    {
        "title": "Learning-D2: Completed Data Visualization Course",
        "postcontent": "Day 2.<br>Today I continued the Data Visualization course that I started yesterday. Today mainly focused on basic Tableau and soft skills for presentations, so it was quite light.<br><br><b>Tableau:</b> Today I practiced and managed to create two dashboards as follows:<br><br>  #1: Happiness Index, GDP per capita, and Life Expectancy<br><img src='../images/happiness_dashboard.png' id='inpost-img' alt='Happiness Dashboard'><br>  Here I have a table on the left showing the happiness index (Happiness Score - HP Score) of countries from 2015-2017, followed by two charts displaying the correlation between HP Score - GDP per capita and HP Score - Life Expectancy.<br>  The line in the middle of the chart is a trendline showing the predicted relationship between the two variables (for those who don\u2019t know, this is Linear Regression, used to predict the correlation between any two variables), and note that this line is only relative (so you may see that not all points lie on the trendline).<br><br>  #2: Average CO2 emissions of countries and regions.<br>  <img src='../images/CO2_dashboard.png' id='inpost-img' alt='CO2 Dashboard'><br>  In this dashboard, the top chart shows the average CO2 emissions of countries from 2015-2017, and the bottom chart shows the average CO2 emissions of regions from 1962-2012.<br>  It was meant to be fun, but it was actually quite enjoyable.\ud83d\ude01\ud83d\ude01\ud83d\ude01<br><br><b>Soft Skills:</b> The job of a Data Analyst involves analyzing data + presenting it (which means giving presentations). So even if you are good at extracting insights from data, if you don\u2019t know how to bring them to people, it\u2019s still 'game over'.<br>Even though it\u2019s still theoretical, this part was quite interesting and useful. In this section, what I found most valuable are two points:<br><br>  <b>#1: Aspects of Data Storytelling</b><ul><li><b>Characters:</b> The target audience you are aiming for when analyzing data (Customers, income, website visits,...). You can think of this as answering the 'Who' and 'What'</li><li><b>Setting:</b> The time + location of the data, answering 'Where' and 'When'. For example, the revenue data of a bubble tea chain in one year.</li><li><b>Plot:</b> The problem you want to solve when analyzing data, and this should be your focus. For example, should your company be concerned about the revenue and profit of a competitor? Or simply, is bubble tea bought more in the summer?</li><li><b>Big Reveal:</b> This is when you share the insights you\u2019ve drawn with everyone. It should be something noteworthy and significant, otherwise, people won\u2019t bother to listen.</li><li><b>Aha moment:</b> At this point, you will suggest the next steps people should take after understanding the insights you\u2019ve drawn (how should the company adjust the quantity of imports based on time, for instance).</li></ul>  <b>#2: Pro-tips</b><ul><li>After showing the audience a chart, pause for about 5 seconds to let people process the chart first.</li><li>When presenting any chart to the audience at the beginning, remember to explain clearly what they need to know to read the chart. It\u2019s even better if you ask, 'Does anyone not understand this chart?'</li><li>Each slide should contain less than 5 lines of text and a total of 25 words.</li><li>Always stay focused on the main topic. If someone asks something unrelated, try to direct them back to the main topic (and possibly arrange another session to share later).</li><li>If someone asks a question that you don\u2019t know the answer to, be honest and ask for time to research, and also schedule a time to get back to them.</li></ul>That\u2019s all I learned today.<br>Stay heated! Thanks for coming here today!",
        "date": "2024-07-23",
        "tags": [
            "Data Visualization",
            "Learning Journey",
            "Data Storytelling"
        ]
    },
    {
        "title": "Learning-D1: Web update + Data Visualization",
        "postcontent": "Today I've made some updates for this website after going through feedbacks.<br>Updates includes: Responsive resize for different screen size, Refine language option button.<br><br>Also, I've started the Data Visualization course from Google Data Analytics Certificate (which is the 6th out of 8 courses you have to complete to get the certificate).<br>Up until now, I've been thinking about visualizing data is a work of creativy, but there turns out to be more...<br>If you're creative and have lots of idea, that's a GREAT PLUS. However, I am not that creative and always struggling with what color to choose; do I have to follow a color palette, if so, which one to choose; is placing this chart here good; etc. (and I believe that there are many people like me). So there are many sets of rules that you can follow, and today I learnt the 'Design Thinking' concept, which has 5 steps: <ol><li><b>Empathize:</b> Consider target audience's needs and preferences for visualizing data</li><li><b>Define:</b>Finding out what the audience want to get from the data (i.e: what target are they focusing on). Ex: Whether temperature and ice cream sales are correlated?</li><li><b>Ideate:</b> Brainstroming how this visualization is going to be. Personally, I would recommend drawing your ideas out, no matter on paper, boards, or tablets, all will work just fine. The target is to let your ideas come out because you can't hold everything in your head. Just let them out and you'll finish this step faster comparing to not draw anything out.</li><li><b>Prototype:</b> Create the visualization! However, this one should be for giving to your folks to get feedbacks.</li><li><b>Test:</b> Show your prototype to people, and receive feedbacks</li></ol>But what after the 'Test' step? After going through all feedbacks, you should go back to step 3, recreate and refine your visualization until you get a nod from everyone.<br><br>I know it's going to take time, especially for people with not much creativity, but if you cannot catch up, you'll be left behind, and no one is going to feel sorry for you. It's like a test of whether you fit this field or not.<br><br>Stay heated! Thanks for coming here today!",
        "date": "2024-07-22",
        "tags": [
            "Data Visualization",
            "Desgin Thinking",
            "Learning Journey"
        ]
    },
    {
        "title": "A Great Start",
        "postcontent": "Welcome!<br><br>Just call me Kay or Kha, whichever is good for you.<br>I'm now a sophomore at an international university in Japan (well, we study everything in English here, so my Japanese is not that good). My major is a mixture between Business and IT, but not double degrees.<br><br>I'm starting this blog to document my journey in learning new things everyday (for now is Data Analytics), and also some random thoughts that come to my mind daily. Therefore, the content of posts can be varied greatly, but most of it will relate somehow to the Technological field.<br><br>I hope you enjoy reading my blog!",
        "date": "2024-07-22",
        "tags": [
            "Thoughts"
        ]
    }
]