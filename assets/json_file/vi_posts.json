[
    {
        "title": "",
        "date": "",
        "tags": [
            ""
        ],
        "postcontent": "Day 10.1<br>Today I started Course 2/7 to obtain the Advanced Data Analytics certification from Google.<br>This course will focus entirely on Python, and <b>COMPLETELY FROM THE BEGINNING.</b><br>That's right, you read it correctly, <b>COMPLETELY COMPLETELY FROM THE BEGINNING.</b><br><br><b>*BIG NOTE:</b> All the Python knowledge taught in this course will focus entirely on Data Analysis, and everything will only be enough to get you started, not to master it. So you can think of this Python series as a <b>PYTHON STARTER PACK</b>.<br>*Small note: I recommend you take <a href='https://cs50.harvard.edu/python/2022/' id='inpost-link' target='_blank'>CS50\u2019s Introduction to Programming with Python</a> from Harvard if you really want to understand Python more deeply.<br><br>This course has 5 modules (divided into 5 parts), and since we are starting from scratch, there\u2019s quite a bit of content, so I will break it down into 4-5 posts for day 10 and 11. Today I\u2019ve completed 2 modules; I\u2019ll probably handle the remaining 3 tomorrow and then write the post hehe.<br><br>Let\u2019s dive in; this post will summarize Mod 1 - Overview of Python, which includes:<br>\n<ul>\n  <li>Understanding Python.</li>\n  <li>Object-oriented Programming (OOP).</li>\n  <li>Variables.</li>\n  <li>Data types and Conversion.</li>\n</ul>\n<br><b>#1: Understanding Python</b><br>First, we need to clarify that Python is a high-level programming language. This means that the way code is written and the functions used will be human-friendly and closer to the language you and I speak daily.<br>This is also a great thing because it makes learning much easier (especially through examples).<br>For example, when we want to print a line of text on the screen, we use ... 'print'!<br><div id=\"code-block\">>>>&nbsp;print('hi&nbsp;there')<br>[Out]&nbsp;hi&nbsp;there</div>Or sorting a list of student ages, for example:<br><div id=\"code-block\">student_age&nbsp;=&nbsp;[18,&nbsp;21,&nbsp;19,&nbsp;20,&nbsp;17]<br>sorted(student_age)<br>[Out]&nbsp;[17,&nbsp;18,&nbsp;19,&nbsp;20,&nbsp;21]</div><br>It will be as simple as that. Also, when coding with Python, you need to choose a programming environment (Integrated Development Environment - IDE). In simple terms, it\u2019s where you write and run your code. Here, I am using Jupyter Notebook on Visual Studio Code.<br><img src='../images/jup_vs.png' id='inpost-img' alt='jup_vs'><br><br>Getting a bit confusing, right? Why am I mentioning Jupyter Notebook when we are talking about Python?<br>Firstly, you can still write Python code in Jupyter Notebook, and since we are focusing on data work, Jupyter Notebook offers several advantages such as:\n<ul>\n  <li>Interactivity: You can write and run code in small chunks (cells), making it easy to test and debug step by step.</li>\n  <li>Easy plotting: Jupyter Notebook allows you to display charts and graphs right after running the code, which is very convenient for data analysis.</li>\n  <li>Combining code and documentation: You can write code along with explanations and documentation directly in the notebook, making the content easier to understand and follow.</li>\n  <li>Sharing and reusing: Notebooks can be easily shared with others, and they can replicate your analysis without needing additional setup.</li>\n</ul>\nBelow is an image depicting all these advantages:<br><img src='../images/jup_ex1.png' id='inpost-img' alt='jup_ex1'>As you can see, you can run code in small cells, and if there\u2019s an error, you can immediately identify the area that needs fixing. Plotting and adding labels (ADD CSV, PLOTTING as shown in the image) are also done within the notebook.<br>In summary, for working with data, Jupyter Notebook is a very useful tool, and I will use it for upcoming posts about Python and Data.<br>Next is a deeper dive into Programming Languages. When using them, we need to consider 5 things:\n<ul>\n  <li>Speed: High-level languages will run slower than low-level languages but are more accessible.</li>\n  <li>Approachability: The difficulty for beginners. This largely depends on the syntax and overall structure of each language. (Syntax is the structure of words, characters, and how they are placed in code)</li>\n  <li>Variables: These are variables stored in code. Each language has different ways of handling variables: <b>*(1)</b></li>\n  <li>Focus: Each language has a different focus. For example, R -> Data, Python -> General use, JavaScript -> Web Dev.</li>\n  <li>Programming paradigm: This refers to how programming languages organize their code, with 3 paradigms: <b>*(2)</b></li> \n</ul>\n<b>*(1)</b>\n<ul>\n  <li>Static: Keeps the value of variables unchanged during code execution.</li>\n  <li>Dynamic: The value of variables can change during code execution.</li>\n</ul>\n<b>*(2)</b>\n<ul>\n  <li>Object-Oriented Programming (OOP): Organizes code into objects and classes.\n<div id=\"code-block\">class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n    def bark(self):\n    \treturn f\"{self.name} says Woof!\"\nmy_dog = Dog(\"Buddy\", \"Golden Retriever\")\nprint(my_dog.bark())</div></li>\n  <li>Functional Programming: Focuses on functions.\n<div id=\"code-block\">def square(x):\n    return x * x\nnumbers = [1, 2, 3, 4]\nsquared_numbers = list(map(square, numbers))\nprint(squared_numbers)</div></li>\n  <li>Imperative Programming: Focuses on sequential commands, instructing the computer how to perform tasks step by step.\n<div id=\"code-block\">numbers = [1, 2, 3, 4]\nsquared_numbers = []\nfor num in numbers:\n    squared_numbers.append(num * num)\nprint(squared_numbers)</div></li>\n</ul>\n<br><b>#2: Object-oriented Programming</b><br>This can be a nightmare for many beginners (including me \ud83d\ude02).<br>As mentioned above, OOP organizes code into objects and classes. So what are they? They are 2 of the 4 basic components of OOP. While we\u2019re at it, let\u2019s mention all 4:\n<ul>\n  <li>Class: Can be understood as a data type (string, float, or integer are also classes).</li>\n  <li>Object: An instance of that class (for example, if variable x has a value of 3 -> class is integer).</li>\n  <li>Method: Functions associated with each class. These functions are created within the class (i.e., when you create a class, you also create functions within it). Accessed using the '.' (Dot notation).</li>\n  <li>Attribute: Values associated with an object/class. Also accessed using '.'. Allows us to view the characteristics of an object/class, but not modify them.</li>\n</ul>\nAs in the previous example of the Dog class:<br><div id=\"code-block\">class&nbsp;Dog:<br>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self,&nbsp;name,&nbsp;breed):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.name&nbsp;=&nbsp;name<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.breed&nbsp;=&nbsp;breed<br>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;bark(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;\treturn&nbsp;f\"{self.name}&nbsp;says&nbsp;Woof!\"<br>my_dog&nbsp;=&nbsp;Dog(\"Buddy\",&nbsp;\"Golden&nbsp;Retriever\")<br>print(my_dog.bark())&nbsp;#call&nbsp;method<br>print(my_dog.breed)&nbsp;#call&nbsp;attribute</div>And the output will be:<br><div id=\"code-block\">Buddy&nbsp;says&nbsp;Woof!<br>Golden&nbsp;Retriever</div>To call a method, you need (), as it\u2019s like a function, while attributes don\u2019t need them.<br><br><b>#3: Variables</b><br>Previously, we often understood variables as x = 3, y = 'name'.<br>BUT THAT'S NOT IT!<br>When we assign a value to a variable like x = 3, the value 3 is stored somewhere in memory, and x is a pointer to the location of that value in memory. That\u2019s a brief explanation.<br><br>Regarding variable names, you can\u2019t name them just however you like; there are certain restrictions:\n<ul>\n  <li>Can only contain letters, numbers, and underscores (_).</li>\n  <li>Cannot start with a number.</li>\n  <li>Case-sensitive, meaning X and x are two entirely different variables.</li>\n  <li>Cannot contain parentheses, as parentheses have other functions in Python.</li>\n  <li>Cannot include keywords (if, else, ...) and functions (print, str, ...) - this is easy to identify as the variable name will change color if it is a keyword or function.</li>\n</ul>\nFor example:\n<ul>\n  <li>kay\u2705</li>\n  <li>name\u2705</li>\n  <li>print\u274c</li>\n  <li>1_print\u274c</li>\n  <li>print_data\u2705</li>\n  <li>if_no_data\u2705</li>\n</ul>\n<br><b>#4: Data types and Conversion</b><br>Data types are similar to any other language; Python has integer, float, string, list, dictionary, etc. You can quickly search for this on Google.<br>However, Python has an interesting feature of converting data types in 2 ways:<br>Implicit: Python understands based on existing data (e.g., 1 + 2.5 => int + float => float).<br>Explicit: You can use available functions to convert data.<br><div id=\"code-block\">>>>&nbsp;print(type(5))<br>class&nbsp;'int'<br>>>>&nbsp;print(type(str(5)))<br>class&nbsp;'str'<br>>>>&nbsp;print(type(float(5)))<br>class&nbsp;'float'</div>This can be particularly useful when you need to print a string that includes a number. If you don\u2019t convert it:<br><div id=\"code-block\">>>>&nbsp;print(\"2&nbsp;+&nbsp;2&nbsp;=\"&nbsp;+&nbsp;(2&nbsp;+&nbsp;2))<br>Traceback&nbsp;(most&nbsp;recent&nbsp;call&nbsp;last):<br>&nbsp;&nbsp;File&nbsp;\"<stdin>\",&nbsp;line&nbsp;1,&nbsp;in&nbsp;<module><br>TypeError:&nbsp;can&nbsp;only&nbsp;concatenate&nbsp;str&nbsp;(not&nbsp;\"int\")&nbsp;to&nbsp;str</div>Since a string cannot be concatenated with a number. To convert:<br><div id=\"code-block\">>>>&nbsp;print(\"2&nbsp;+&nbsp;2&nbsp;=\"&nbsp;+&nbsp;str(2&nbsp;+&nbsp;2))<br>2&nbsp;+&nbsp;2&nbsp;=4</div>And you get a nice result!<br><br>And that\u2019s the end of module 1. See you in post 10.2 tomorrow!<br>May peace be with you!<br>Stay heated! Thanks for reading!<br>"
    },
    {
        "title": "",
        "date": "",
        "tags": [
            ""
        ],
        "postcontent": "Day 10.1<br>Today I started Course 2/7 to obtain the Advanced Data Analytics certification from Google.<br>This course will focus entirely on Python, and <b>COMPLETELY FROM THE BEGINNING.</b><br>That's right, you read it correctly, <b>COMPLETELY COMPLETELY FROM THE BEGINNING.</b><br><br><b>*BIG NOTE:</b> All the Python knowledge taught in this course will focus entirely on Data Analysis, and everything will only be enough to get you started, not to master it. So you can think of this Python series as a <b>PYTHON STARTER PACK</b>.<br>*Small note: I recommend you take <a href='https://cs50.harvard.edu/python/2022/' id='inpost-link' target='_blank'>CS50\u2019s Introduction to Programming with Python</a> from Harvard if you really want to understand Python more deeply.<br><br>This course has 5 modules (divided into 5 parts), and since we are starting from scratch, there\u2019s quite a bit of content, so I will break it down into 4-5 posts for day 10 and 11. Today I\u2019ve completed 2 modules; I\u2019ll probably handle the remaining 3 tomorrow and then write the post hehe.<br><br>Let\u2019s dive in; this post will summarize Mod 1 - Overview of Python, which includes:<br>\n<ul>\n  <li>Understanding Python.</li>\n  <li>Object-oriented Programming (OOP).</li>\n  <li>Variables.</li>\n  <li>Data types and Conversion.</li>\n</ul>\n<br><b>#1: Understanding Python</b><br>First, we need to clarify that Python is a high-level programming language. This means that the way code is written and the functions used will be human-friendly and closer to the language you and I speak daily.<br>This is also a great thing because it makes learning much easier (especially through examples).<br>For example, when we want to print a line of text on the screen, we use ... 'print'!<br><div id=\"code-block\">>>>&nbsp;print('hi&nbsp;there')<br>[Out]&nbsp;hi&nbsp;there</div>Or sorting a list of student ages, for example:<br><div id=\"code-block\">student_age&nbsp;=&nbsp;[18,&nbsp;21,&nbsp;19,&nbsp;20,&nbsp;17]<br>sorted(student_age)<br>[Out]&nbsp;[17,&nbsp;18,&nbsp;19,&nbsp;20,&nbsp;21]</div><br>It will be as simple as that. Also, when coding with Python, you need to choose a programming environment (Integrated Development Environment - IDE). In simple terms, it\u2019s where you write and run your code. Here, I am using Jupyter Notebook on Visual Studio Code.<br><img src='../images/jup_vs.png' id='inpost-img' alt='jup_vs'><br><br>Getting a bit confusing, right? Why am I mentioning Jupyter Notebook when we are talking about Python?<br>Firstly, you can still write Python code in Jupyter Notebook, and since we are focusing on data work, Jupyter Notebook offers several advantages such as:\n<ul>\n  <li>Interactivity: You can write and run code in small chunks (cells), making it easy to test and debug step by step.</li>\n  <li>Easy plotting: Jupyter Notebook allows you to display charts and graphs right after running the code, which is very convenient for data analysis.</li>\n  <li>Combining code and documentation: You can write code along with explanations and documentation directly in the notebook, making the content easier to understand and follow.</li>\n  <li>Sharing and reusing: Notebooks can be easily shared with others, and they can replicate your analysis without needing additional setup.</li>\n</ul>\nBelow is an image depicting all these advantages:<br><img src='../images/jup_ex1.png' id='inpost-img' alt='jup_ex1'>As you can see, you can run code in small cells, and if there\u2019s an error, you can immediately identify the area that needs fixing. Plotting and adding labels (ADD CSV, PLOTTING as shown in the image) are also done within the notebook.<br>In summary, for working with data, Jupyter Notebook is a very useful tool, and I will use it for upcoming posts about Python and Data.<br>Next is a deeper dive into Programming Languages. When using them, we need to consider 5 things:\n<ul>\n  <li>Speed: High-level languages will run slower than low-level languages but are more accessible.</li>\n  <li>Approachability: The difficulty for beginners. This largely depends on the syntax and overall structure of each language. (Syntax is the structure of words, characters, and how they are placed in code)</li>\n  <li>Variables: These are variables stored in code. Each language has different ways of handling variables: <b>*(1)</b></li>\n  <li>Focus: Each language has a different focus. For example, R -> Data, Python -> General use, JavaScript -> Web Dev.</li>\n  <li>Programming paradigm: This refers to how programming languages organize their code, with 3 paradigms: <b>*(2)</b></li> \n</ul>\n<b>*(1)</b>\n<ul>\n  <li>Static: Keeps the value of variables unchanged during code execution.</li>\n  <li>Dynamic: The value of variables can change during code execution.</li>\n</ul>\n<b>*(2)</b>\n<ul>\n  <li>Object-Oriented Programming (OOP): Organizes code into objects and classes.\n<div id=\"code-block\">class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n    def bark(self):\n    \treturn f\"{self.name} says Woof!\"\nmy_dog = Dog(\"Buddy\", \"Golden Retriever\")\nprint(my_dog.bark())</div></li>\n  <li>Functional Programming: Focuses on functions.\n<div id=\"code-block\">def square(x):\n    return x * x\nnumbers = [1, 2, 3, 4]\nsquared_numbers = list(map(square, numbers))\nprint(squared_numbers)</div></li>\n  <li>Imperative Programming: Focuses on sequential commands, instructing the computer how to perform tasks step by step.\n<div id=\"code-block\">numbers = [1, 2, 3, 4]\nsquared_numbers = []\nfor num in numbers:\n    squared_numbers.append(num * num)\nprint(squared_numbers)</div></li>\n</ul>\n<b>#2: Object-oriented Programming</b><br>This can be a nightmare for many beginners (including me \ud83d\ude02).<br>As mentioned above, OOP organizes code into objects and classes. So what are they? They are 2 of the 4 basic components of OOP. While we\u2019re at it, let\u2019s mention all 4:\n<ul>\n  <li>Class: Can be understood as a data type (string, float, or integer are also classes).</li>\n  <li>Object: An instance of that class (for example, if variable x has a value of 3 -> class is integer).</li>\n  <li>Method: Functions associated with each class. These functions are created within the class (i.e., when you create a class, you also create functions within it). Accessed using the '.' (Dot notation).</li>\n  <li>Attribute: Values associated with an object/class. Also accessed using '.'. Allows us to view the characteristics of an object/class, but not modify them.</li>\n</ul>\nAs in the previous example of the Dog class:<br><div id=\"code-block\">class&nbsp;Dog:<br>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self,&nbsp;name,&nbsp;breed):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.name&nbsp;=&nbsp;name<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.breed&nbsp;=&nbsp;breed<br>python<br>Copy&nbsp;code<br>def&nbsp;bark(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;f\"{self.name}&nbsp;says&nbsp;Woof!\"<br>my_dog&nbsp;=&nbsp;Dog(\"Buddy\",&nbsp;\"Golden&nbsp;Retriever\")<br>print(my_dog.bark())&nbsp;#call&nbsp;method<br>print(my_dog.breed)&nbsp;#call&nbsp;attribute</div>And the output will be:<br><br><div id=\"code-block\">Buddy&nbsp;says&nbsp;Woof!<br>Golden&nbsp;Retriever</div>To call a method, you need (), as it\u2019s like a function, while attributes don\u2019t need them.<br><b>#3: Variables</b><br>Previously, we often understood variables as x = 3, y = 'name'.<br>BUT THAT'S NOT IT!<br>When we assign a value to a variable like x = 3, the value 3 is stored somewhere in memory, and x is a pointer to the location of that value in memory. That\u2019s a brief explanation.<br><br>Regarding variable names, you can\u2019t name them just however you like; there are certain restrictions:<br>\n<ul>\n  <li>Can only contain letters, numbers, and underscores (_).</li>\n  <li>Cannot start with a number.</li>\n  <li>Case-sensitive, meaning X and x are two entirely different variables.</li>\n  <li>Cannot contain parentheses, as parentheses have other functions in Python.</li>\n  <li>Cannot include keywords (if, else, ...) and functions (print, str, ...) - this is easy to identify as the variable name will change color if it is a keyword or function.</li>\n</ul>\nFor example:\n<ul>\n  <li>kay\u2705</li>\n  <li>name\u2705</li>\n  <li>print\u274c</li>\n  <li>1_print\u274c</li>\n  <li>print_data\u2705</li>\n  <li>if_no_data\u2705</li>\n</ul>\n<b>#4: Data types and Conversion</b><br>Data types are similar to any other language; Python has integer, float, string, list, dictionary, etc. You can quickly search for this on Google.<br>However, Python has an interesting feature of converting data types in 2 ways:<br>Implicit: Python understands based on existing data (e.g., 1 + 2.5 => int + float => float).<br>Explicit: You can use available functions to convert data.<br><br><div id=\"code-block\">>>>&nbsp;print(type(5))<br>class&nbsp;'int'<br>>>>&nbsp;print(type(str(5)))<br>class&nbsp;'str'<br>>>>&nbsp;print(type(float(5)))<br>class&nbsp;'float'</div>This can be particularly useful when you need to print a string that includes a number. If you don\u2019t convert it:<br><div id=\"code-block\">>>>&nbsp;print(\"2&nbsp;+&nbsp;2&nbsp;=\"&nbsp;+&nbsp;(2&nbsp;+&nbsp;2))<br>Traceback&nbsp;(most&nbsp;recent&nbsp;call&nbsp;last):<br>&nbsp;&nbsp;File&nbsp;\"<stdin>\",&nbsp;line&nbsp;1,&nbsp;in&nbsp;<module><br>TypeError:&nbsp;can&nbsp;only&nbsp;concatenate&nbsp;str&nbsp;(not&nbsp;\"int\")&nbsp;to&nbsp;str</div>Since a string cannot be concatenated with a number. To convert:<br><div id=\"code-block\">>>>&nbsp;print(\"2&nbsp;+&nbsp;2&nbsp;=\"&nbsp;+&nbsp;str(2&nbsp;+&nbsp;2))<br>2&nbsp;+&nbsp;2&nbsp;=4</div>And you get a nice result!<br>And that\u2019s the end of module 1. See you in post 10.2 tomorrow!<br>Peace be with you!<br>Stay heated! Thanks for reading!<br>"
    }
]